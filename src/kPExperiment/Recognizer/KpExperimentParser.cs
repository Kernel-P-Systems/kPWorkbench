//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KpExperiment.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KpExperiment.Recognizer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class KpExperimentParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		Identifier=25, RelationalOperator=26, NumericLiteral=27, Ws=28, Comment=29, 
		LineComment=30;
	public const int
		RULE_kPExpriment = 0, RULE_ltlProperty = 1, RULE_ctlProperty = 2, RULE_ltlExpression = 3, 
		RULE_ctlExpression = 4, RULE_unaryExpression = 5, RULE_binaryExpression = 6, 
		RULE_notLtlExpression = 7, RULE_alwaysExpression = 8, RULE_eventuallyExpression = 9, 
		RULE_nextExpression = 10, RULE_neverExpression = 11, RULE_infinitelyOftenExpression = 12, 
		RULE_steadyStateExpression = 13, RULE_untilExpression = 14, RULE_weakUntilExpression = 15, 
		RULE_followedByExpression = 16, RULE_precededByExpression = 17, RULE_equivalenceExpression = 18, 
		RULE_implicationExpression = 19, RULE_orExpression = 20, RULE_andExpression = 21, 
		RULE_ltlExpressionOperand = 22, RULE_notExpression = 23, RULE_relationalExpression = 24, 
		RULE_arithmeticExpression = 25, RULE_arithmeticAddition = 26, RULE_arithmeticMultiplication = 27, 
		RULE_arithmeticOperand = 28, RULE_objectMultiplicity = 29;
	public static readonly string[] ruleNames = {
		"kPExpriment", "ltlProperty", "ctlProperty", "ltlExpression", "ctlExpression", 
		"unaryExpression", "binaryExpression", "notLtlExpression", "alwaysExpression", 
		"eventuallyExpression", "nextExpression", "neverExpression", "infinitelyOftenExpression", 
		"steadyStateExpression", "untilExpression", "weakUntilExpression", "followedByExpression", 
		"precededByExpression", "equivalenceExpression", "implicationExpression", 
		"orExpression", "andExpression", "ltlExpressionOperand", "notExpression", 
		"relationalExpression", "arithmeticExpression", "arithmeticAddition", 
		"arithmeticMultiplication", "arithmeticOperand", "objectMultiplicity"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ltl'", "':'", "';'", "'ctl'", "'not'", "'always'", "'eventually'", 
		"'next'", "'never'", "'infinitely-often'", "'steady-state'", "'until'", 
		"'weak-until'", "'followed-by'", "'preceded-by'", "'equivalent'", "'implies'", 
		"'or'", "'and'", "'('", "')'", "'+'", "'*'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "Identifier", "RelationalOperator", "NumericLiteral", "Ws", "Comment", 
		"LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KpExperiment.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KpExperimentParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	        protected const int EOF = Eof;

		public KpExperimentParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KpExperimentParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class KPExprimentContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(KpExperimentParser.Eof, 0); }
		public LtlPropertyContext[] ltlProperty() {
			return GetRuleContexts<LtlPropertyContext>();
		}
		public LtlPropertyContext ltlProperty(int i) {
			return GetRuleContext<LtlPropertyContext>(i);
		}
		public CtlPropertyContext[] ctlProperty() {
			return GetRuleContexts<CtlPropertyContext>();
		}
		public CtlPropertyContext ctlProperty(int i) {
			return GetRuleContext<CtlPropertyContext>(i);
		}
		public KPExprimentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kPExpriment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKPExpriment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KPExprimentContext kPExpriment() {
		KPExprimentContext _localctx = new KPExprimentContext(Context, State);
		EnterRule(_localctx, 0, RULE_kPExpriment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 62;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
					{
					State = 60; ltlProperty();
					}
					break;
				case T__3:
					{
					State = 61; ctlProperty();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 || _la==T__3 );
			State = 66; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LtlPropertyContext : ParserRuleContext {
		public LtlExpressionContext ltlExpression() {
			return GetRuleContext<LtlExpressionContext>(0);
		}
		public LtlPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ltlProperty; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLtlProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LtlPropertyContext ltlProperty() {
		LtlPropertyContext _localctx = new LtlPropertyContext(Context, State);
		EnterRule(_localctx, 2, RULE_ltlProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(T__0);
			State = 69; Match(T__1);
			State = 70; ltlExpression();
			State = 71; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtlPropertyContext : ParserRuleContext {
		public CtlExpressionContext ctlExpression() {
			return GetRuleContext<CtlExpressionContext>(0);
		}
		public CtlPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctlProperty; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtlProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtlPropertyContext ctlProperty() {
		CtlPropertyContext _localctx = new CtlPropertyContext(Context, State);
		EnterRule(_localctx, 4, RULE_ctlProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(T__3);
			State = 74; Match(T__1);
			State = 75; ctlExpression();
			State = 76; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LtlExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public BinaryExpressionContext binaryExpression() {
			return GetRuleContext<BinaryExpressionContext>(0);
		}
		public LtlExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ltlExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLtlExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LtlExpressionContext ltlExpression() {
		LtlExpressionContext _localctx = new LtlExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_ltlExpression);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78; unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 79; binaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtlExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public BinaryExpressionContext binaryExpression() {
			return GetRuleContext<BinaryExpressionContext>(0);
		}
		public CtlExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctlExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtlExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtlExpressionContext ctlExpression() {
		CtlExpressionContext _localctx = new CtlExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_ctlExpression);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; binaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public NotLtlExpressionContext notLtlExpression() {
			return GetRuleContext<NotLtlExpressionContext>(0);
		}
		public EventuallyExpressionContext eventuallyExpression() {
			return GetRuleContext<EventuallyExpressionContext>(0);
		}
		public AlwaysExpressionContext alwaysExpression() {
			return GetRuleContext<AlwaysExpressionContext>(0);
		}
		public NextExpressionContext nextExpression() {
			return GetRuleContext<NextExpressionContext>(0);
		}
		public NeverExpressionContext neverExpression() {
			return GetRuleContext<NeverExpressionContext>(0);
		}
		public InfinitelyOftenExpressionContext infinitelyOftenExpression() {
			return GetRuleContext<InfinitelyOftenExpressionContext>(0);
		}
		public SteadyStateExpressionContext steadyStateExpression() {
			return GetRuleContext<SteadyStateExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_unaryExpression);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; notLtlExpression();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; eventuallyExpression();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; alwaysExpression();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 4);
				{
				State = 89; nextExpression();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 5);
				{
				State = 90; neverExpression();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 6);
				{
				State = 91; infinitelyOftenExpression();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 7);
				{
				State = 92; steadyStateExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpressionContext : ParserRuleContext {
		public UntilExpressionContext untilExpression() {
			return GetRuleContext<UntilExpressionContext>(0);
		}
		public WeakUntilExpressionContext weakUntilExpression() {
			return GetRuleContext<WeakUntilExpressionContext>(0);
		}
		public FollowedByExpressionContext followedByExpression() {
			return GetRuleContext<FollowedByExpressionContext>(0);
		}
		public PrecededByExpressionContext precededByExpression() {
			return GetRuleContext<PrecededByExpressionContext>(0);
		}
		public BinaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpressionContext binaryExpression() {
		BinaryExpressionContext _localctx = new BinaryExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_binaryExpression);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95; untilExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96; weakUntilExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 97; followedByExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 98; precededByExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotLtlExpressionContext : ParserRuleContext {
		public LtlExpressionContext ltlExpression() {
			return GetRuleContext<LtlExpressionContext>(0);
		}
		public NotLtlExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notLtlExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotLtlExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotLtlExpressionContext notLtlExpression() {
		NotLtlExpressionContext _localctx = new NotLtlExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_notLtlExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(T__4);
			State = 102; ltlExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlwaysExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public AlwaysExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alwaysExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlwaysExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlwaysExpressionContext alwaysExpression() {
		AlwaysExpressionContext _localctx = new AlwaysExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_alwaysExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(T__5);
			State = 105; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventuallyExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public EventuallyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventuallyExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventuallyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventuallyExpressionContext eventuallyExpression() {
		EventuallyExpressionContext _localctx = new EventuallyExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_eventuallyExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(T__6);
			State = 108; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public NextExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextExpressionContext nextExpression() {
		NextExpressionContext _localctx = new NextExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_nextExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(T__7);
			State = 111; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NeverExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public NeverExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neverExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeverExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NeverExpressionContext neverExpression() {
		NeverExpressionContext _localctx = new NeverExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_neverExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(T__8);
			State = 114; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InfinitelyOftenExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public InfinitelyOftenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_infinitelyOftenExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfinitelyOftenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InfinitelyOftenExpressionContext infinitelyOftenExpression() {
		InfinitelyOftenExpressionContext _localctx = new InfinitelyOftenExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_infinitelyOftenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(T__9);
			State = 117; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SteadyStateExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public SteadyStateExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_steadyStateExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSteadyStateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SteadyStateExpressionContext steadyStateExpression() {
		SteadyStateExpressionContext _localctx = new SteadyStateExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_steadyStateExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(T__10);
			State = 120; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext[] equivalenceExpression() {
			return GetRuleContexts<EquivalenceExpressionContext>();
		}
		public EquivalenceExpressionContext equivalenceExpression(int i) {
			return GetRuleContext<EquivalenceExpressionContext>(i);
		}
		public UntilExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilExpressionContext untilExpression() {
		UntilExpressionContext _localctx = new UntilExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_untilExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; equivalenceExpression();
			State = 123; Match(T__11);
			State = 124; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeakUntilExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext[] equivalenceExpression() {
			return GetRuleContexts<EquivalenceExpressionContext>();
		}
		public EquivalenceExpressionContext equivalenceExpression(int i) {
			return GetRuleContext<EquivalenceExpressionContext>(i);
		}
		public WeakUntilExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weakUntilExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeakUntilExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeakUntilExpressionContext weakUntilExpression() {
		WeakUntilExpressionContext _localctx = new WeakUntilExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_weakUntilExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; equivalenceExpression();
			State = 127; Match(T__12);
			State = 128; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FollowedByExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext[] equivalenceExpression() {
			return GetRuleContexts<EquivalenceExpressionContext>();
		}
		public EquivalenceExpressionContext equivalenceExpression(int i) {
			return GetRuleContext<EquivalenceExpressionContext>(i);
		}
		public FollowedByExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_followedByExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFollowedByExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FollowedByExpressionContext followedByExpression() {
		FollowedByExpressionContext _localctx = new FollowedByExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_followedByExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; equivalenceExpression();
			State = 131; Match(T__13);
			State = 132; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecededByExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext[] equivalenceExpression() {
			return GetRuleContexts<EquivalenceExpressionContext>();
		}
		public EquivalenceExpressionContext equivalenceExpression(int i) {
			return GetRuleContext<EquivalenceExpressionContext>(i);
		}
		public PrecededByExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precededByExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecededByExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecededByExpressionContext precededByExpression() {
		PrecededByExpressionContext _localctx = new PrecededByExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_precededByExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; equivalenceExpression();
			State = 135; Match(T__14);
			State = 136; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquivalenceExpressionContext : ParserRuleContext {
		public ImplicationExpressionContext[] implicationExpression() {
			return GetRuleContexts<ImplicationExpressionContext>();
		}
		public ImplicationExpressionContext implicationExpression(int i) {
			return GetRuleContext<ImplicationExpressionContext>(i);
		}
		public EquivalenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalenceExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquivalenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquivalenceExpressionContext equivalenceExpression() {
		EquivalenceExpressionContext _localctx = new EquivalenceExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_equivalenceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; implicationExpression();
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 139; Match(T__15);
				State = 140; implicationExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicationExpressionContext : ParserRuleContext {
		public OrExpressionContext[] orExpression() {
			return GetRuleContexts<OrExpressionContext>();
		}
		public OrExpressionContext orExpression(int i) {
			return GetRuleContext<OrExpressionContext>(i);
		}
		public ImplicationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicationExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicationExpressionContext implicationExpression() {
		ImplicationExpressionContext _localctx = new ImplicationExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_implicationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; orExpression();
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 144; Match(T__16);
				State = 145; orExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		OrExpressionContext _localctx = new OrExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_orExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; andExpression();
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 149; Match(T__17);
				State = 150; andExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public LtlExpressionOperandContext[] ltlExpressionOperand() {
			return GetRuleContexts<LtlExpressionOperandContext>();
		}
		public LtlExpressionOperandContext ltlExpressionOperand(int i) {
			return GetRuleContext<LtlExpressionOperandContext>(i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; ltlExpressionOperand();
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 154; Match(T__18);
				State = 155; ltlExpressionOperand();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LtlExpressionOperandContext : ParserRuleContext {
		public LtlExpressionContext ltlExpression() {
			return GetRuleContext<LtlExpressionContext>(0);
		}
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		public LtlExpressionOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ltlExpressionOperand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLtlExpressionOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LtlExpressionOperandContext ltlExpressionOperand() {
		LtlExpressionOperandContext _localctx = new LtlExpressionOperandContext(Context, State);
		EnterRule(_localctx, 44, RULE_ltlExpressionOperand);
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; Match(T__19);
				State = 159; ltlExpression();
				State = 160; Match(T__20);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; Match(T__19);
				State = 163; equivalenceExpression();
				State = 164; Match(T__20);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 166; relationalExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 167; notExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_notExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(T__4);
			State = 171; Match(T__19);
			State = 172; equivalenceExpression();
			State = 173; Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		public ITerminalNode RelationalOperator() { return GetToken(KpExperimentParser.RelationalOperator, 0); }
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_relationalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; arithmeticExpression();
			State = 176; Match(RelationalOperator);
			State = 177; arithmeticExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticExpressionContext : ParserRuleContext {
		public ArithmeticAdditionContext arithmeticAddition() {
			return GetRuleContext<ArithmeticAdditionContext>(0);
		}
		public ArithmeticMultiplicationContext arithmeticMultiplication() {
			return GetRuleContext<ArithmeticMultiplicationContext>(0);
		}
		public ArithmeticOperandContext arithmeticOperand() {
			return GetRuleContext<ArithmeticOperandContext>(0);
		}
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_arithmeticExpression);
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179; arithmeticAddition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180; arithmeticMultiplication();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 181; arithmeticOperand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticAdditionContext : ParserRuleContext {
		public ArithmeticOperandContext[] arithmeticOperand() {
			return GetRuleContexts<ArithmeticOperandContext>();
		}
		public ArithmeticOperandContext arithmeticOperand(int i) {
			return GetRuleContext<ArithmeticOperandContext>(i);
		}
		public ArithmeticAdditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticAddition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticAddition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticAdditionContext arithmeticAddition() {
		ArithmeticAdditionContext _localctx = new ArithmeticAdditionContext(Context, State);
		EnterRule(_localctx, 52, RULE_arithmeticAddition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; arithmeticOperand();
			State = 185; Match(T__21);
			State = 186; arithmeticOperand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticMultiplicationContext : ParserRuleContext {
		public ArithmeticOperandContext[] arithmeticOperand() {
			return GetRuleContexts<ArithmeticOperandContext>();
		}
		public ArithmeticOperandContext arithmeticOperand(int i) {
			return GetRuleContext<ArithmeticOperandContext>(i);
		}
		public ArithmeticMultiplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticMultiplication; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticMultiplicationContext arithmeticMultiplication() {
		ArithmeticMultiplicationContext _localctx = new ArithmeticMultiplicationContext(Context, State);
		EnterRule(_localctx, 54, RULE_arithmeticMultiplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; arithmeticOperand();
			State = 189; Match(T__22);
			State = 190; arithmeticOperand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOperandContext : ParserRuleContext {
		public ObjectMultiplicityContext objectMultiplicity() {
			return GetRuleContext<ObjectMultiplicityContext>(0);
		}
		public ITerminalNode NumericLiteral() { return GetToken(KpExperimentParser.NumericLiteral, 0); }
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public ArithmeticOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOperand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOperandContext arithmeticOperand() {
		ArithmeticOperandContext _localctx = new ArithmeticOperandContext(Context, State);
		EnterRule(_localctx, 56, RULE_arithmeticOperand);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192; objectMultiplicity();
				}
				break;
			case NumericLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193; Match(NumericLiteral);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 3);
				{
				State = 194; Match(T__19);
				State = 195; arithmeticExpression();
				State = 196; Match(T__20);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectMultiplicityContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(KpExperimentParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(KpExperimentParser.Identifier, i);
		}
		public ObjectMultiplicityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectMultiplicity; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectMultiplicity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectMultiplicityContext objectMultiplicity() {
		ObjectMultiplicityContext _localctx = new ObjectMultiplicityContext(Context, State);
		EnterRule(_localctx, 58, RULE_objectMultiplicity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(Identifier);
			State = 201; Match(T__23);
			State = 202; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ' ', '\xCF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x3', 
		'\x2', '\x3', '\x2', '\x6', '\x2', '\x41', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '\x42', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', 'S', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'W', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '`', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x66', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x90', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x95', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x9A', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x9F', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xAB', '\n', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xB9', '\n', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\xC9', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x2', '\x2', ' ', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '\x2', '\x2', '\x2', '\xC8', '\x2', '@', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x46', '\x3', '\x2', '\x2', '\x2', '\x6', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'R', '\x3', '\x2', '\x2', '\x2', '\n', 'V', 
		'\x3', '\x2', '\x2', '\x2', '\f', '_', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x10', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x12', 'j', '\x3', '\x2', '\x2', '\x2', '\x14', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x16', 'p', '\x3', '\x2', '\x2', '\x2', '\x18', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', 'v', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x1E', '|', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x80', '\x3', '\x2', '\x2', '\x2', '\"', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x88', '\x3', '\x2', '\x2', '\x2', '&', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x91', '\x3', '\x2', '\x2', '\x2', '*', '\x96', '\x3', 
		'\x2', '\x2', '\x2', ',', '\x9B', '\x3', '\x2', '\x2', '\x2', '.', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x34', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\xBA', '\x3', '\x2', '\x2', '\x2', '\x38', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', ':', '\xC8', '\x3', '\x2', '\x2', '\x2', '<', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '>', '\x41', '\x5', '\x4', '\x3', 
		'\x2', '?', '\x41', '\x5', '\x6', '\x4', '\x2', '@', '>', '\x3', '\x2', 
		'\x2', '\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\a', '\x2', '\x2', '\x3', '\x45', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\a', '\x3', '\x2', '\x2', 'G', 'H', 
		'\a', '\x4', '\x2', '\x2', 'H', 'I', '\x5', '\b', '\x5', '\x2', 'I', 'J', 
		'\a', '\x5', '\x2', '\x2', 'J', '\x5', '\x3', '\x2', '\x2', '\x2', 'K', 
		'L', '\a', '\x6', '\x2', '\x2', 'L', 'M', '\a', '\x4', '\x2', '\x2', 'M', 
		'N', '\x5', '\n', '\x6', '\x2', 'N', 'O', '\a', '\x5', '\x2', '\x2', 'O', 
		'\a', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x5', '\f', '\a', '\x2', 
		'Q', 'S', '\x5', '\xE', '\b', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'W', '\x5', '\f', '\a', '\x2', 'U', 'W', '\x5', '\xE', '\b', 
		'\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'W', '\v', '\x3', '\x2', '\x2', '\x2', 'X', '`', '\x5', '\x10', 
		'\t', '\x2', 'Y', '`', '\x5', '\x14', '\v', '\x2', 'Z', '`', '\x5', '\x12', 
		'\n', '\x2', '[', '`', '\x5', '\x16', '\f', '\x2', '\\', '`', '\x5', '\x18', 
		'\r', '\x2', ']', '`', '\x5', '\x1A', '\xE', '\x2', '^', '`', '\x5', '\x1C', 
		'\xF', '\x2', '_', 'X', '\x3', '\x2', '\x2', '\x2', '_', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '_', 'Z', '\x3', '\x2', '\x2', '\x2', '_', '[', '\x3', '\x2', 
		'\x2', '\x2', '_', '\\', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', 
		'\x2', '\x2', '\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x66', '\x5', '\x1E', '\x10', '\x2', 
		'\x62', '\x66', '\x5', ' ', '\x11', '\x2', '\x63', '\x66', '\x5', '\"', 
		'\x12', '\x2', '\x64', '\x66', '\x5', '$', '\x13', '\x2', '\x65', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\xF', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\a', 
		'\a', '\x2', '\x2', 'h', 'i', '\x5', '\b', '\x5', '\x2', 'i', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\b', '\x2', '\x2', 'k', 'l', 
		'\x5', '&', '\x14', '\x2', 'l', '\x13', '\x3', '\x2', '\x2', '\x2', 'm', 
		'n', '\a', '\t', '\x2', '\x2', 'n', 'o', '\x5', '&', '\x14', '\x2', 'o', 
		'\x15', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\n', '\x2', '\x2', 
		'q', 'r', '\x5', '&', '\x14', '\x2', 'r', '\x17', '\x3', '\x2', '\x2', 
		'\x2', 's', 't', '\a', '\v', '\x2', '\x2', 't', 'u', '\x5', '&', '\x14', 
		'\x2', 'u', '\x19', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\f', 
		'\x2', '\x2', 'w', 'x', '\x5', '&', '\x14', '\x2', 'x', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', 'y', 'z', '\a', '\r', '\x2', '\x2', 'z', '{', '\x5', 
		'&', '\x14', '\x2', '{', '\x1D', '\x3', '\x2', '\x2', '\x2', '|', '}', 
		'\x5', '&', '\x14', '\x2', '}', '~', '\a', '\xE', '\x2', '\x2', '~', '\x7F', 
		'\x5', '&', '\x14', '\x2', '\x7F', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x81', '\x5', '&', '\x14', '\x2', '\x81', '\x82', '\a', '\xF', 
		'\x2', '\x2', '\x82', '\x83', '\x5', '&', '\x14', '\x2', '\x83', '!', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x5', '&', '\x14', '\x2', 
		'\x85', '\x86', '\a', '\x10', '\x2', '\x2', '\x86', '\x87', '\x5', '&', 
		'\x14', '\x2', '\x87', '#', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', 
		'\x5', '&', '\x14', '\x2', '\x89', '\x8A', '\a', '\x11', '\x2', '\x2', 
		'\x8A', '\x8B', '\x5', '&', '\x14', '\x2', '\x8B', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8F', '\x5', '(', '\x15', '\x2', '\x8D', '\x8E', 
		'\a', '\x12', '\x2', '\x2', '\x8E', '\x90', '\x5', '(', '\x15', '\x2', 
		'\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\'', '\x3', '\x2', '\x2', '\x2', '\x91', '\x94', 
		'\x5', '*', '\x16', '\x2', '\x92', '\x93', '\a', '\x13', '\x2', '\x2', 
		'\x93', '\x95', '\x5', '*', '\x16', '\x2', '\x94', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x99', '\x5', ',', '\x17', '\x2', 
		'\x97', '\x98', '\a', '\x14', '\x2', '\x2', '\x98', '\x9A', '\x5', ',', 
		'\x17', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '+', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9E', '\x5', '.', '\x18', '\x2', '\x9C', '\x9D', '\a', '\x15', '\x2', 
		'\x2', '\x9D', '\x9F', '\x5', '.', '\x18', '\x2', '\x9E', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'-', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', '\x16', '\x2', 
		'\x2', '\xA1', '\xA2', '\x5', '\b', '\x5', '\x2', '\xA2', '\xA3', '\a', 
		'\x17', '\x2', '\x2', '\xA3', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA5', '\a', '\x16', '\x2', '\x2', '\xA5', '\xA6', '\x5', '&', '\x14', 
		'\x2', '\xA6', '\xA7', '\a', '\x17', '\x2', '\x2', '\xA7', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xAB', '\x5', '\x32', '\x1A', '\x2', '\xA9', 
		'\xAB', '\x5', '\x30', '\x19', '\x2', '\xAA', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'/', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', '\a', '\x2', '\x2', 
		'\xAD', '\xAE', '\a', '\x16', '\x2', '\x2', '\xAE', '\xAF', '\x5', '&', 
		'\x14', '\x2', '\xAF', '\xB0', '\a', '\x17', '\x2', '\x2', '\xB0', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x5', '\x34', '\x1B', '\x2', 
		'\xB2', '\xB3', '\a', '\x1C', '\x2', '\x2', '\xB3', '\xB4', '\x5', '\x34', 
		'\x1B', '\x2', '\xB4', '\x33', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB9', 
		'\x5', '\x36', '\x1C', '\x2', '\xB6', '\xB9', '\x5', '\x38', '\x1D', '\x2', 
		'\xB7', '\xB9', '\x5', ':', '\x1E', '\x2', '\xB8', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBB', '\x5', ':', '\x1E', '\x2', '\xBB', '\xBC', '\a', '\x18', 
		'\x2', '\x2', '\xBC', '\xBD', '\x5', ':', '\x1E', '\x2', '\xBD', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x5', ':', '\x1E', '\x2', 
		'\xBF', '\xC0', '\a', '\x19', '\x2', '\x2', '\xC0', '\xC1', '\x5', ':', 
		'\x1E', '\x2', '\xC1', '\x39', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC9', 
		'\x5', '<', '\x1F', '\x2', '\xC3', '\xC9', '\a', '\x1D', '\x2', '\x2', 
		'\xC4', '\xC5', '\a', '\x16', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\x34', 
		'\x1B', '\x2', '\xC6', '\xC7', '\a', '\x17', '\x2', '\x2', '\xC7', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', ';', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', 
		'\a', '\x1B', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x1A', '\x2', '\x2', 
		'\xCC', '\xCD', '\a', '\x1B', '\x2', '\x2', '\xCD', '=', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '@', '\x42', 'R', 'V', '_', '\x65', '\x8F', '\x94', 
		'\x99', '\x9E', '\xAA', '\xB8', '\xC8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace KpExperiment.Recognizer
