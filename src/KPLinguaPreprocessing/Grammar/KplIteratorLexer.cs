//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KplIterator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

namespace KPLinguaPreprocessing.Grammar
{
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
    [System.CLSCompliant(false)]
    public partial class KplIteratorLexer : Lexer {
        protected static DFA[] decisionToDFA;
        protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
        public const int
            T__0=1, T__1=2, Add=3, Sub=4, Mul=5, Gt=6, Gte=7, Lt=8, Lte=9, Eq=10, 
            Neq=11, Or=12, And=13, Number=14, Identifier=15, WS=16;
        public static string[] channelNames = {
            "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
        };

        public static string[] modeNames = {
            "DEFAULT_MODE"
        };

        public static readonly string[] ruleNames = {
            "T__0", "T__1", "Add", "Sub", "Mul", "Gt", "Gte", "Lt", "Lte", "Eq", "Neq", 
            "Or", "And", "Number", "Identifier", "WS"
        };


        public KplIteratorLexer(ICharStream input)
            : this(input, Console.Out, Console.Error) { }

        public KplIteratorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
            : base(input, output, errorOutput)
        {
            Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
        }

        private static readonly string[] _LiteralNames = {
            null, "','", "'='", "'+'", "'-'", "'*'", "'>'", "'>='", "'<'", "'<='", 
            "'=='", "'!='", "'|'", "'&'"
        };
        private static readonly string[] _SymbolicNames = {
            null, null, null, "Add", "Sub", "Mul", "Gt", "Gte", "Lt", "Lte", "Eq", 
            "Neq", "Or", "And", "Number", "Identifier", "WS"
        };
        public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

        [NotNull]
        public override IVocabulary Vocabulary
        {
            get
            {
                return DefaultVocabulary;
            }
        }

        public override string GrammarFileName { get { return "KplIterator.g4"; } }

        public override string[] RuleNames { get { return ruleNames; } }

        public override string[] ChannelNames { get { return channelNames; } }

        public override string[] ModeNames { get { return modeNames; } }

        public override int[] SerializedAtn { get { return _serializedATN; } }

        static KplIteratorLexer() {
            decisionToDFA = new DFA[_ATN.NumberOfDecisions];
            for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
                decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
            }
        }
        private static int[] _serializedATN = {
            4,0,16,82,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
            2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
            14,2,15,7,15,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,
            6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,
            13,4,13,65,8,13,11,13,12,13,66,1,14,1,14,5,14,71,8,14,10,14,12,14,74,9,
            14,1,15,4,15,77,8,15,11,15,12,15,78,1,15,1,15,0,0,16,1,1,3,2,5,3,7,4,9,
            5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,1,0,4,
            1,0,48,57,2,0,65,90,97,122,3,0,48,57,65,90,97,122,2,0,10,10,32,32,84,0,
            1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
            0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
            1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,0,
            0,3,35,1,0,0,0,5,37,1,0,0,0,7,39,1,0,0,0,9,41,1,0,0,0,11,43,1,0,0,0,13,
            45,1,0,0,0,15,48,1,0,0,0,17,50,1,0,0,0,19,53,1,0,0,0,21,56,1,0,0,0,23,
            59,1,0,0,0,25,61,1,0,0,0,27,64,1,0,0,0,29,68,1,0,0,0,31,76,1,0,0,0,33,
            34,5,44,0,0,34,2,1,0,0,0,35,36,5,61,0,0,36,4,1,0,0,0,37,38,5,43,0,0,38,
            6,1,0,0,0,39,40,5,45,0,0,40,8,1,0,0,0,41,42,5,42,0,0,42,10,1,0,0,0,43,
            44,5,62,0,0,44,12,1,0,0,0,45,46,5,62,0,0,46,47,5,61,0,0,47,14,1,0,0,0,
            48,49,5,60,0,0,49,16,1,0,0,0,50,51,5,60,0,0,51,52,5,61,0,0,52,18,1,0,0,
            0,53,54,5,61,0,0,54,55,5,61,0,0,55,20,1,0,0,0,56,57,5,33,0,0,57,58,5,61,
            0,0,58,22,1,0,0,0,59,60,5,124,0,0,60,24,1,0,0,0,61,62,5,38,0,0,62,26,1,
            0,0,0,63,65,7,0,0,0,64,63,1,0,0,0,65,66,1,0,0,0,66,64,1,0,0,0,66,67,1,
            0,0,0,67,28,1,0,0,0,68,72,7,1,0,0,69,71,7,2,0,0,70,69,1,0,0,0,71,74,1,
            0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,30,1,0,0,0,74,72,1,0,0,0,75,77,7,
            3,0,0,76,75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,80,1,
            0,0,0,80,81,6,15,0,0,81,32,1,0,0,0,4,0,66,72,78,1,6,0,0
        };

        public static readonly ATN _ATN =
            new ATNDeserializer().Deserialize(_serializedATN);


    }
}
