//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KplIterator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

namespace KPLinguaPreprocessing.Grammar
{
    /// <summary>
    /// This class provides an empty implementation of <see cref="IKplIteratorVisitor{Result}"/>,
    /// which can be extended to create a visitor which only needs to handle a subset
    /// of the available methods.
    /// </summary>
    /// <typeparam name="Result">The return type of the visit operation.</typeparam>
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
    [System.Diagnostics.DebuggerNonUserCode]
    [System.CLSCompliant(false)]
    public partial class KplIteratorBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, global::KPLinguaPreprocessing.Grammar.IKplIteratorVisitor<Result> {
        /// <summary>
        /// Visit a parse tree produced by <see cref="KplIteratorParser.parameters"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitParameters([NotNull] KplIteratorParser.ParametersContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="KplIteratorParser.parameter"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitParameter([NotNull] KplIteratorParser.ParameterContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="KplIteratorParser.iterators"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitIterators([NotNull] KplIteratorParser.IteratorsContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="KplIteratorParser.iterator"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitIterator([NotNull] KplIteratorParser.IteratorContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>arOpExp</c>
        /// labeled alternative in <see cref="KplIteratorParser.arithmeticExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitArOpExp([NotNull] KplIteratorParser.ArOpExpContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="KplIteratorParser.identifier"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitIdentifier([NotNull] KplIteratorParser.IdentifierContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>loOpExp</c>
        /// labeled alternative in <see cref="KplIteratorParser.relationalExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitLoOpExp([NotNull] KplIteratorParser.LoOpExpContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="KplIteratorParser.logicalExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitLogicalExpression([NotNull] KplIteratorParser.LogicalExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>logicalOperatorName</c>
        /// labeled alternative in <see cref="KplIteratorParser.logicalOperator"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitLogicalOperatorName([NotNull] KplIteratorParser.LogicalOperatorNameContext context) { return VisitChildren(context); }
    }
}
