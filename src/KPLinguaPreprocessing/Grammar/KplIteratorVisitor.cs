//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KplIterator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

namespace KPLinguaPreprocessing.Grammar
{
    /// <summary>
    /// This interface defines a complete generic visitor for a parse tree produced
    /// by <see cref="KplIteratorParser"/>.
    /// </summary>
    /// <typeparam name="Result">The return type of the visit operation.</typeparam>
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
    [System.CLSCompliant(false)]
    public interface IKplIteratorVisitor<Result> : IParseTreeVisitor<Result> {
        /// <summary>
        /// Visit a parse tree produced by <see cref="KplIteratorParser.parameters"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitParameters([NotNull] KplIteratorParser.ParametersContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="KplIteratorParser.parameter"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitParameter([NotNull] KplIteratorParser.ParameterContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="KplIteratorParser.iterators"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitIterators([NotNull] KplIteratorParser.IteratorsContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="KplIteratorParser.iterator"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitIterator([NotNull] KplIteratorParser.IteratorContext context);
        /// <summary>
        /// Visit a parse tree produced by the <c>arOpExp</c>
        /// labeled alternative in <see cref="KplIteratorParser.arithmeticExpression"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitArOpExp([NotNull] KplIteratorParser.ArOpExpContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="KplIteratorParser.identifier"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitIdentifier([NotNull] KplIteratorParser.IdentifierContext context);
        /// <summary>
        /// Visit a parse tree produced by the <c>loOpExp</c>
        /// labeled alternative in <see cref="KplIteratorParser.relationalExpression"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitLoOpExp([NotNull] KplIteratorParser.LoOpExpContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="KplIteratorParser.logicalExpression"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitLogicalExpression([NotNull] KplIteratorParser.LogicalExpressionContext context);
        /// <summary>
        /// Visit a parse tree produced by the <c>logicalOperatorName</c>
        /// labeled alternative in <see cref="KplIteratorParser.logicalOperator"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitLogicalOperatorName([NotNull] KplIteratorParser.LogicalOperatorNameContext context);
    }
}
